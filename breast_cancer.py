# -*- coding: utf-8 -*-
"""Breast_cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ATrsypq23kcRt6ww_voJvW8LdZSin7sZ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report

cols = ["x.radius_mean", "x.radius_mean", "x.texture_mean", "x.perimeter_mean", "x.area_mean", "x.smoothness_mean", "x.compactness_mean", "x.concavity_mean", "x.concave_pts_mean", "x.symmetry_mean", "x.fractal_dim_mean", "x.radius_se", "x.texture_se", "x.perimeter_se", "x.area_se", "x.smoothness_se", "x.compactness_se", "x.concavity_se", "x.concave_pts_se", "x.symmetry_se", "x.fractal_dim_se", "x.radius_worst", "x.texture_worst", "x.perimeter_worst", "x.area_worst", "x.smoothness_worst", "x.compactness_worst", "x.concavity_worst", "x.concave_pts_worst", "x.symmetry_worst", "x.fractal_dim_worst", "y"]
df = pd.read_csv("brca.csv")

df.head()

df["y"] = (df["y"] == "M").astype(int)

for label in cols[:-1]:
  plt.hist(df[df["y"] == 1][label], color = 'blue', label = 'malignant cancer', alpha = 0.7, density =True)
  plt.hist(df[df["y"] == 0][label], color = 'red', label = 'normal breast', alpha = 0.7, density =True)
  plt.title(label)
  plt.ylabel("Probability")
  plt.xlabel(label)
  plt.legend()
  plt.show()

"""Train, validation, test datasets"""

train, valid, test = np.split(df.sample(frac=1), [(int(0.6*len(df))), (int(0.8*len(df)))])

def scale_dataset(dataframe, oversample = False):
  X = dataframe[dataframe.columns[:-1]].values
  y = dataframe[dataframe.columns[-1]].values

  scaler = StandardScaler()
  X = scaler.fit_transform(X)

  if oversample:
    ros = RandomOverSampler()
    X, y = ros.fit_resample(X, y)


  data = np.hstack((X, np.reshape(y, (-1,1))))

  return data, X, y

train, X_train, y_train = scale_dataset(train, oversample = True)
valid, X_valid, y_valid = scale_dataset(valid, oversample = False)
test, X_test, y_test = scale_dataset(test, oversample = False)

"""#K Nearest Neighbours

"""

knn_model = KNeighborsClassifier(n_neighbors=10)
knn_model.fit(X_train, y_train)

#lets get all the predictions
y_pred = knn_model.predict(X_test)

y_pred

y_test

print(classification_report(y_test, y_pred))

